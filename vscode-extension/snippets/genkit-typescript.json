{
  "Genkit Flow": {
    "prefix": "gflow",
    "body": [
      "import { defineFlow } from '@genkit-ai/flow';",
      "import { z } from 'zod';",
      "",
      "export const ${1:flowName}Flow = defineFlow(",
      "  {",
      "    name: '${1:flowName}',",
      "    inputSchema: z.object({",
      "      ${2:input}: z.string(),",
      "    }),",
      "    outputSchema: z.${3:string}(),",
      "  },",
      "  async (input) => {",
      "    ${4:// Implement flow logic}",
      "    return ${5:input.${2:input}};",
      "  }",
      ");"
    ],
    "description": "Create a new Genkit flow"
  },
  "Genkit Tool": {
    "prefix": "gtool",
    "body": [
      "import { defineTool } from '@genkit-ai/flow';",
      "import { z } from 'zod';",
      "",
      "export const ${1:toolName}Tool = defineTool(",
      "  {",
      "    name: '${1:toolName}',",
      "    description: '${2:Tool description}',",
      "    inputSchema: z.object({",
      "      ${3:param}: z.string(),",
      "    }),",
      "    outputSchema: z.${4:string}(),",
      "  },",
      "  async (input) => {",
      "    ${5:// Implement tool logic}",
      "    return ${6:result};",
      "  }",
      ");"
    ],
    "description": "Create a new Genkit tool"
  },
  "Genkit RAG Flow": {
    "prefix": "grag",
    "body": [
      "import { defineFlow } from '@genkit-ai/flow';",
      "import { z } from 'zod';",
      "",
      "export const ${1:ragFlow} = defineFlow(",
      "  {",
      "    name: '${1:ragFlow}',",
      "    inputSchema: z.object({",
      "      question: z.string(),",
      "      maxResults: z.number().default(5),",
      "    }),",
      "    outputSchema: z.object({",
      "      answer: z.string(),",
      "      sources: z.array(z.string()),",
      "    }),",
      "  },",
      "  async (input) => {",
      "    // Retrieve relevant documents",
      "    const docs = await ${2:vectorStore}.search(input.question, {",
      "      limit: input.maxResults,",
      "    });",
      "",
      "    // Generate answer with context",
      "    const result = await ${3:model}.generate({",
      "      prompt: `Context:\\n${4:\\${docs.map(d => d.content).join('\\n\\n')}}\\n\\nQuestion: ${5:\\${input.question}}\\n\\nAnswer:`,",
      "    });",
      "",
      "    return {",
      "      answer: result.text,",
      "      sources: docs.map(d => d.id),",
      "    };",
      "  }",
      ");"
    ],
    "description": "Create a RAG flow with Genkit"
  },
  "Genkit Config": {
    "prefix": "gconfig",
    "body": [
      "import { configureGenkit } from '@genkit-ai/core';",
      "import { ${1:claude} } from '@genkit-ai/${2:anthropic}';",
      "",
      "export default configureGenkit({",
      "  plugins: [",
      "    ${1:claude}({",
      "      apiKey: process.env.${3:ANTHROPIC_API_KEY},",
      "    }),",
      "  ],",
      "  logLevel: '${4:debug}',",
      "  enableTracingAndMetrics: ${5:true},",
      "});"
    ],
    "description": "Create Genkit configuration"
  },
  "Genkit Streaming Flow": {
    "prefix": "gstream",
    "body": [
      "import { defineFlow } from '@genkit-ai/flow';",
      "import { z } from 'zod';",
      "",
      "export const ${1:streamFlow} = defineFlow(",
      "  {",
      "    name: '${1:streamFlow}',",
      "    inputSchema: z.object({",
      "      prompt: z.string(),",
      "    }),",
      "    outputSchema: z.string(),",
      "    streamSchema: z.string(),",
      "  },",
      "  async (input, { stream }) => {",
      "    ${2:// Implement streaming logic}",
      "    for (const ${3:chunk} of ${4:chunks}) {",
      "      stream(${3:chunk});",
      "      await new Promise(resolve => setTimeout(resolve, ${5:100}));",
      "    }",
      "    return ${6:'Complete response'};",
      "  }",
      ");"
    ],
    "description": "Create a streaming Genkit flow"
  },
  "Claude Generate": {
    "prefix": "genclaude",
    "body": [
      "import { claude35Sonnet } from '@genkit-ai/anthropic';",
      "",
      "const result = await claude35Sonnet.generate({",
      "  ${1|prompt,messages|}: ${2:'Your prompt here'},",
      "  config: {",
      "    temperature: ${3:0.7},",
      "    maxTokens: ${4:1000},",
      "  },",
      "});",
      "",
      "const response = result.text;"
    ],
    "description": "Generate with Claude"
  },
  "Gemini Generate": {
    "prefix": "gengemini",
    "body": [
      "import { gemini15Pro } from '@genkit-ai/googleai';",
      "",
      "const result = await gemini15Pro.generate({",
      "  ${1|prompt,messages|}: ${2:'Your prompt here'},",
      "  config: {",
      "    temperature: ${3:0.7},",
      "    maxTokens: ${4:1000},",
      "  },",
      "});",
      "",
      "const response = result.text;"
    ],
    "description": "Generate with Gemini"
  }
}
